//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Script/Input System/Deneme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Deneme : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Deneme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Deneme"",
    ""maps"": [
        {
            ""name"": ""Swipe"",
            ""id"": ""86a102d9-ce90-4d9f-b1c9-fa85f901d9ad"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""0d3fd261-ca87-427e-96ea-44df1adcb093"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""547c7cf1-6272-4f81-b55b-87319b867c23"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c852fd4-6167-486f-ac59-969fb88be8e5"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a565e74-9ea2-450d-9951-ad325496a05b"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Swipe
        m_Swipe = asset.FindActionMap("Swipe", throwIfNotFound: true);
        m_Swipe_Touch = m_Swipe.FindAction("Touch", throwIfNotFound: true);
        m_Swipe_TouchPosition = m_Swipe.FindAction("TouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Swipe
    private readonly InputActionMap m_Swipe;
    private ISwipeActions m_SwipeActionsCallbackInterface;
    private readonly InputAction m_Swipe_Touch;
    private readonly InputAction m_Swipe_TouchPosition;
    public struct SwipeActions
    {
        private @Deneme m_Wrapper;
        public SwipeActions(@Deneme wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_Swipe_Touch;
        public InputAction @TouchPosition => m_Wrapper.m_Swipe_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_Swipe; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwipeActions set) { return set.Get(); }
        public void SetCallbacks(ISwipeActions instance)
        {
            if (m_Wrapper.m_SwipeActionsCallbackInterface != null)
            {
                @Touch.started -= m_Wrapper.m_SwipeActionsCallbackInterface.OnTouch;
                @Touch.performed -= m_Wrapper.m_SwipeActionsCallbackInterface.OnTouch;
                @Touch.canceled -= m_Wrapper.m_SwipeActionsCallbackInterface.OnTouch;
                @TouchPosition.started -= m_Wrapper.m_SwipeActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_SwipeActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_SwipeActionsCallbackInterface.OnTouchPosition;
            }
            m_Wrapper.m_SwipeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Touch.started += instance.OnTouch;
                @Touch.performed += instance.OnTouch;
                @Touch.canceled += instance.OnTouch;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
            }
        }
    }
    public SwipeActions @Swipe => new SwipeActions(this);
    public interface ISwipeActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
}
